/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef _NOEXPORT



#define SWIG_VERSION 0x040201
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_PatternSolver(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_PatternSolver(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_PatternSolver(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "CPP_CS_Interop.h"
#include "Utils.h"
#include "VortexModel.h"
#include "LinearPiecewiseVortex.h"
#include "VecHashGrid.h"
#include "ConvergenceLine.h"
#include "Transect.h"
#include "ObservedPattern.h"
#include "AutoTransectFitter.h"
#include "PatternMatcher.h"
#include "VortexFactory.h"
#include "Monitor.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleVector_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleVector_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleVector_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DoubleVector_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DoubleVector_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleVector(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSpan(void * jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  std::span< double > result;
  
  arg1 = (double *)jarg1; 
  arg2 = (int)jarg2; 
  result = createSpan(arg1,arg2);
  jresult = new std::span< double >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_getSpanSize(void * jarg1) {
  int jresult ;
  std::span< double > arg1 ;
  std::span< double > *argp1 ;
  int result;
  
  argp1 = (std::span< double > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::span< double >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (int)getSpanSize(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getSpanPtr(void * jarg1) {
  void * jresult ;
  std::span< double > arg1 ;
  std::span< double > *argp1 ;
  double *result = 0 ;
  
  argp1 = (std::span< double > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::span< double >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (double *)getSpanPtr(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_freeSpan(void * jarg1) {
  std::span< double > arg1 ;
  std::span< double > *argp1 ;
  
  argp1 = (std::span< double > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::span< double >", 0);
    return ;
  }
  arg1 = *argp1; 
  freeSpan(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createVector(double* jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  std::vector< double > result;
  
  arg1 = jarg1;
  arg2 = (int)jarg2; 
  result = createVector(arg1,arg2);
  jresult = new std::vector< double >(result); 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getVector(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  double *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return 0;
  } 
  result = (double *)getVector(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_min_set(void * jarg1, double jarg2) {
  Utils::Range *arg1 = (Utils::Range *) 0 ;
  double arg2 ;
  
  arg1 = (Utils::Range *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Range_min_get(void * jarg1) {
  double jresult ;
  Utils::Range *arg1 = (Utils::Range *) 0 ;
  double result;
  
  arg1 = (Utils::Range *)jarg1; 
  result = (double) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_max_set(void * jarg1, double jarg2) {
  Utils::Range *arg1 = (Utils::Range *) 0 ;
  double arg2 ;
  
  arg1 = (Utils::Range *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Range_max_get(void * jarg1) {
  double jresult ;
  Utils::Range *arg1 = (Utils::Range *) 0 ;
  double result;
  
  arg1 = (Utils::Range *)jarg1; 
  result = (double) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Range_random(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Utils::Range *arg1 = (Utils::Range *) 0 ;
  std::uniform_real_distribution< double > *arg2 = 0 ;
  std::mt19937 *arg3 = 0 ;
  double result;
  
  arg1 = (Utils::Range *)jarg1; 
  arg2 = (std::uniform_real_distribution< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::uniform_real_distribution< double > & is null", 0);
    return 0;
  } 
  arg3 = (std::mt19937 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::mt19937 & is null", 0);
    return 0;
  } 
  result = (double)((Utils::Range const *)arg1)->random(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Range() {
  void * jresult ;
  Utils::Range *result = 0 ;
  
  result = (Utils::Range *)new Utils::Range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Range(void * jarg1) {
  Utils::Range *arg1 = (Utils::Range *) 0 ;
  
  arg1 = (Utils::Range *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_writeBinaryFile(void * jarg1, const char * jarg2) {
  std::vector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Utils::writeBinaryFile((std::vector< double > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_readBinaryFile(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< double > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = Utils::readBinaryFile((std::string const &)*arg1);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve_xs_set(void * jarg1, void * jarg2) {
  Curve *arg1 = (Curve *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Curve *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->xs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve_xs_get(void * jarg1) {
  void * jresult ;
  Curve *arg1 = (Curve *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Curve *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->xs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve_ys_set(void * jarg1, void * jarg2) {
  Curve *arg1 = (Curve *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Curve *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->ys = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve_ys_get(void * jarg1) {
  void * jresult ;
  Curve *arg1 = (Curve *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Curve *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->ys);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve_reserve(void * jarg1, int jarg2) {
  Curve *arg1 = (Curve *) 0 ;
  int arg2 ;
  
  arg1 = (Curve *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Curve() {
  void * jresult ;
  Curve *result = 0 ;
  
  result = (Curve *)new Curve();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Curve(void * jarg1) {
  Curve *arg1 = (Curve *) 0 ;
  
  arg1 = (Curve *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pattern_vecs_set(void * jarg1, void * jarg2) {
  Pattern *arg1 = (Pattern *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Pattern *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->vecs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pattern_vecs_get(void * jarg1) {
  void * jresult ;
  Pattern *arg1 = (Pattern *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Pattern *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->vecs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pattern_dx_set(void * jarg1, double jarg2) {
  Pattern *arg1 = (Pattern *) 0 ;
  double arg2 ;
  
  arg1 = (Pattern *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dx = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pattern_dx_get(void * jarg1) {
  double jresult ;
  Pattern *arg1 = (Pattern *) 0 ;
  double result;
  
  arg1 = (Pattern *)jarg1; 
  result = (double) ((arg1)->dx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pattern_lower_set(void * jarg1, double jarg2) {
  Pattern *arg1 = (Pattern *) 0 ;
  double arg2 ;
  
  arg1 = (Pattern *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lower = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pattern_lower_get(void * jarg1) {
  double jresult ;
  Pattern *arg1 = (Pattern *) 0 ;
  double result;
  
  arg1 = (Pattern *)jarg1; 
  result = (double) ((arg1)->lower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pattern_upper_set(void * jarg1, double jarg2) {
  Pattern *arg1 = (Pattern *) 0 ;
  double arg2 ;
  
  arg1 = (Pattern *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->upper = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pattern_upper_get(void * jarg1) {
  double jresult ;
  Pattern *arg1 = (Pattern *) 0 ;
  double result;
  
  arg1 = (Pattern *)jarg1; 
  result = (double) ((arg1)->upper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pattern_Xc_set(void * jarg1, double jarg2) {
  Pattern *arg1 = (Pattern *) 0 ;
  double arg2 ;
  
  arg1 = (Pattern *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Xc = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pattern_Xc_get(void * jarg1) {
  double jresult ;
  Pattern *arg1 = (Pattern *) 0 ;
  double result;
  
  arg1 = (Pattern *)jarg1; 
  result = (double) ((arg1)->Xc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pattern__SWIG_0() {
  void * jresult ;
  Pattern *result = 0 ;
  
  result = (Pattern *)new Pattern();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pattern__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Pattern *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (Pattern *)new Pattern(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pattern_reserve(void * jarg1, unsigned int jarg2) {
  Pattern *arg1 = (Pattern *) 0 ;
  size_t arg2 ;
  
  arg1 = (Pattern *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pattern_insert(void * jarg1, void * jarg2) {
  Pattern *arg1 = (Pattern *) 0 ;
  std::array< double,4 > arg2 ;
  std::array< double,4 > *argp2 ;
  
  arg1 = (Pattern *)jarg1; 
  argp2 = (std::array< double,4 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::array< double,4 >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->insert(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Pattern(void * jarg1) {
  Pattern *arg1 = (Pattern *) 0 ;
  
  arg1 = (Pattern *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VortexModel_Vr_set(void * jarg1, double jarg2) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Vr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_Vr_get(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double) ((arg1)->Vr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VortexModel_Vt_set(void * jarg1, double jarg2) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Vt = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_Vt_get(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double) ((arg1)->Vt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VortexModel_Vs_set(void * jarg1, double jarg2) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Vs = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_Vs_get(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double) ((arg1)->Vs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VortexModel_lower_set(void * jarg1, double jarg2) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lower = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_lower_get(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double) ((arg1)->lower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VortexModel_upper_set(void * jarg1, double jarg2) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->upper = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_upper_get(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double) ((arg1)->upper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VortexModel_Xc_set(void * jarg1, double jarg2) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Xc = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_Xc_get(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double) ((arg1)->Xc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_vecAt(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  double arg3 ;
  Vec2 result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->vecAt(arg2,arg3);
  jresult = new Vec2(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_patternLocation(void * jarg1, double jarg2) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->patternLocation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VortexModel_solveAxesOfInterest(void * jarg1) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  
  arg1 = (VortexModel *)jarg1; 
  (arg1)->solveAxesOfInterest();
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_length(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double)(arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_lengthAbove(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double)(arg1)->lengthAbove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_lengthBelow(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double)(arg1)->lengthBelow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_vmax(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double)(arg1)->vmax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VortexModel_hasPattern(void * jarg1) {
  unsigned int jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  bool result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (bool)(arg1)->hasPattern();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_unitVecAt(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  double arg3 ;
  Vec2 result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->unitVecAt(arg2,arg3);
  jresult = new Vec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_patternVec(void * jarg1, double jarg2) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  Vec2 result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->patternVec(arg2);
  jresult = new Vec2(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_magAt(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->magAt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VortexModel_swirlRatio(void * jarg1) {
  double jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double result;
  
  arg1 = (VortexModel *)jarg1; 
  result = (double)(arg1)->swirlRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_field__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, int jarg6) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::vector< double > result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  result = (arg1)->field(arg2,arg3,arg4,arg5,arg6);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_field__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::vector< double > result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->field(arg2,arg3,arg4,arg5,arg6);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_patternCurve(void * jarg1, int jarg2) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  int arg2 ;
  Curve result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->patternCurve(arg2);
  jresult = new Curve(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_pattern__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  double arg2 ;
  Pattern result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->pattern(arg2);
  jresult = new Pattern(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexModel_pattern__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  VortexModel *arg1 = (VortexModel *) 0 ;
  int arg2 ;
  Pattern result;
  
  arg1 = (VortexModel *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->pattern(arg2);
  jresult = new Pattern(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VortexModel(void * jarg1) {
  VortexModel *arg1 = (VortexModel *) 0 ;
  
  arg1 = (VortexModel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearPiecewiseVortex__SWIG_0() {
  void * jresult ;
  LinearPiecewiseVortex *result = 0 ;
  
  result = (LinearPiecewiseVortex *)new LinearPiecewiseVortex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearPiecewiseVortex__SWIG_1(void * jarg1) {
  void * jresult ;
  SplineTable arg1 ;
  SplineTable *argp1 ;
  LinearPiecewiseVortex *result = 0 ;
  
  argp1 = (SplineTable *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SplineTable", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (LinearPiecewiseVortex *)new LinearPiecewiseVortex(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearPiecewiseVortex__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< double > arg1 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp1 ;
  std::vector< double > *argp2 ;
  LinearPiecewiseVortex *result = 0 ;
  
  argp1 = (std::vector< double > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (LinearPiecewiseVortex *)new LinearPiecewiseVortex(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinearPiecewiseVortex_vecAt(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  LinearPiecewiseVortex *arg1 = (LinearPiecewiseVortex *) 0 ;
  double arg2 ;
  double arg3 ;
  Vec2 result;
  
  arg1 = (LinearPiecewiseVortex *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->vecAt(arg2,arg3);
  jresult = new Vec2(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LinearPiecewiseVortex_patternLocation(void * jarg1, double jarg2) {
  double jresult ;
  LinearPiecewiseVortex *arg1 = (LinearPiecewiseVortex *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (LinearPiecewiseVortex *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->patternLocation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinearPiecewiseVortex(void * jarg1) {
  LinearPiecewiseVortex *arg1 = (LinearPiecewiseVortex *) 0 ;
  
  arg1 = (LinearPiecewiseVortex *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gridSize_get() {
  int jresult ;
  int result;
  
  result = (int)gridSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VecHashGrid_xmin_set(void * jarg1, double jarg2) {
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double arg2 ;
  
  arg1 = (VecHashGrid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xmin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VecHashGrid_xmin_get(void * jarg1) {
  double jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double result;
  
  arg1 = (VecHashGrid *)jarg1; 
  result = (double) ((arg1)->xmin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VecHashGrid_xmax_set(void * jarg1, double jarg2) {
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double arg2 ;
  
  arg1 = (VecHashGrid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xmax = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VecHashGrid_xmax_get(void * jarg1) {
  double jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double result;
  
  arg1 = (VecHashGrid *)jarg1; 
  result = (double) ((arg1)->xmax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VecHashGrid_ymin_set(void * jarg1, double jarg2) {
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double arg2 ;
  
  arg1 = (VecHashGrid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ymin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VecHashGrid_ymin_get(void * jarg1) {
  double jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double result;
  
  arg1 = (VecHashGrid *)jarg1; 
  result = (double) ((arg1)->ymin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VecHashGrid_ymax_set(void * jarg1, double jarg2) {
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double arg2 ;
  
  arg1 = (VecHashGrid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ymax = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VecHashGrid_ymax_get(void * jarg1) {
  double jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  double result;
  
  arg1 = (VecHashGrid *)jarg1; 
  result = (double) ((arg1)->ymax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VecHashGrid__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< double > arg1 ;
  std::vector< double > *argp1 ;
  VecHashGrid *result = 0 ;
  
  argp1 = (std::vector< double > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (VecHashGrid *)new VecHashGrid(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VecHashGrid__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  VecHashGrid *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (VecHashGrid *)new VecHashGrid(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VecHashGrid_insert(void * jarg1, void * jarg2) {
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  
  arg1 = (VecHashGrid *)jarg1; 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->insert(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VecHashGrid_query__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  Rect arg2 ;
  Rect *argp2 ;
  std::vector< double > result;
  
  arg1 = (VecHashGrid *)jarg1; 
  argp2 = (Rect *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Rect", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->query(arg2);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VecHashGrid_query__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  Transect arg2 ;
  Transect *argp2 ;
  std::vector< double > result;
  
  arg1 = (VecHashGrid *)jarg1; 
  argp2 = (Transect *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Transect", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->query(arg2);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VecHashGrid_vectors(void * jarg1) {
  void * jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  std::vector< double > result;
  
  arg1 = (VecHashGrid *)jarg1; 
  result = (arg1)->vectors();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VecHashGrid_counts(void * jarg1) {
  void * jresult ;
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  std::vector< double > result;
  
  arg1 = (VecHashGrid *)jarg1; 
  result = (arg1)->counts();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VecHashGrid(void * jarg1) {
  VecHashGrid *arg1 = (VecHashGrid *) 0 ;
  
  arg1 = (VecHashGrid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvergenceLine__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< double > arg1 ;
  std::vector< double > *argp1 ;
  ConvergenceLine *result = 0 ;
  
  argp1 = (std::vector< double > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ConvergenceLine *)new ConvergenceLine(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvergenceLine__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  ConvergenceLine *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (ConvergenceLine *)new ConvergenceLine(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvergenceLine_query(void * jarg1, double jarg2) {
  void * jresult ;
  ConvergenceLine *arg1 = (ConvergenceLine *) 0 ;
  double arg2 ;
  std::vector< double > result;
  
  arg1 = (ConvergenceLine *)jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->query(arg2);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ConvergenceLine_length(void * jarg1) {
  double jresult ;
  ConvergenceLine *arg1 = (ConvergenceLine *) 0 ;
  double result;
  
  arg1 = (ConvergenceLine *)jarg1; 
  result = (double)(arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvergenceLine_getXs(void * jarg1) {
  void * jresult ;
  ConvergenceLine *arg1 = (ConvergenceLine *) 0 ;
  std::vector< double > result;
  
  arg1 = (ConvergenceLine *)jarg1; 
  result = (arg1)->getXs();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvergenceLine_getYs(void * jarg1) {
  void * jresult ;
  ConvergenceLine *arg1 = (ConvergenceLine *) 0 ;
  std::vector< double > result;
  
  arg1 = (ConvergenceLine *)jarg1; 
  result = (arg1)->getYs();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConvergenceLine(void * jarg1) {
  ConvergenceLine *arg1 = (ConvergenceLine *) 0 ;
  
  arg1 = (ConvergenceLine *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PI_get() {
  double jresult ;
  double result;
  
  result = (double)PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rect_x_set(void * jarg1, double jarg2) {
  Rect *arg1 = (Rect *) 0 ;
  double arg2 ;
  
  arg1 = (Rect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Rect_x_get(void * jarg1) {
  double jresult ;
  Rect *arg1 = (Rect *) 0 ;
  double result;
  
  arg1 = (Rect *)jarg1; 
  result = (double) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rect_y_set(void * jarg1, double jarg2) {
  Rect *arg1 = (Rect *) 0 ;
  double arg2 ;
  
  arg1 = (Rect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Rect_y_get(void * jarg1) {
  double jresult ;
  Rect *arg1 = (Rect *) 0 ;
  double result;
  
  arg1 = (Rect *)jarg1; 
  result = (double) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rect_w_set(void * jarg1, double jarg2) {
  Rect *arg1 = (Rect *) 0 ;
  double arg2 ;
  
  arg1 = (Rect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Rect_w_get(void * jarg1) {
  double jresult ;
  Rect *arg1 = (Rect *) 0 ;
  double result;
  
  arg1 = (Rect *)jarg1; 
  result = (double) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Rect_h_set(void * jarg1, double jarg2) {
  Rect *arg1 = (Rect *) 0 ;
  double arg2 ;
  
  arg1 = (Rect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Rect_h_get(void * jarg1) {
  double jresult ;
  Rect *arg1 = (Rect *) 0 ;
  double result;
  
  arg1 = (Rect *)jarg1; 
  result = (double) ((arg1)->h);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rect() {
  void * jresult ;
  Rect *result = 0 ;
  
  result = (Rect *)new Rect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Rect(void * jarg1) {
  Rect *arg1 = (Rect *) 0 ;
  
  arg1 = (Rect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_x_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_x_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_y_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_y_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_theta_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->theta = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_theta_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->theta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_lengthAbove_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lengthAbove = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_lengthAbove_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->lengthAbove);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_lengthBelow_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lengthBelow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_lengthBelow_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->lengthBelow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_width_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_width_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_positionOffset_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->positionOffset = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_positionOffset_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->positionOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_heightOffset_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->heightOffset = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_heightOffset_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->heightOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_angleOffset_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->angleOffset = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_angleOffset_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->angleOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_spacing_set(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->spacing = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Transect_spacing_get(void * jarg1) {
  double jresult ;
  Transect *arg1 = (Transect *) 0 ;
  double result;
  
  arg1 = (Transect *)jarg1; 
  result = (double) ((arg1)->spacing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_name_set(void * jarg1, const char * jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Transect *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Transect_name_get(void * jarg1) {
  const char * jresult ;
  Transect *arg1 = (Transect *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Transect *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transect__SWIG_0(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  Transect *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (Transect *)new Transect(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transect__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Transect *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (Transect *)new Transect(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transect__SWIG_2() {
  void * jresult ;
  Transect *result = 0 ;
  
  result = (Transect *)new Transect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transect_setPerpendicularAngle(void * jarg1, double jarg2) {
  Transect *arg1 = (Transect *) 0 ;
  double arg2 ;
  
  arg1 = (Transect *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPerpendicularAngle(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transect_center(void * jarg1) {
  void * jresult ;
  Transect *arg1 = (Transect *) 0 ;
  std::array< double,2 > result;
  
  arg1 = (Transect *)jarg1; 
  result = (arg1)->center();
  jresult = new std::array< double,2 >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transect_normRect(void * jarg1) {
  void * jresult ;
  Transect *arg1 = (Transect *) 0 ;
  Rect result;
  
  arg1 = (Transect *)jarg1; 
  result = (arg1)->normRect();
  jresult = new Rect(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Transect_extent(void * jarg1) {
  void * jresult ;
  Transect *arg1 = (Transect *) 0 ;
  std::vector< double > result;
  
  arg1 = (Transect *)jarg1; 
  result = (arg1)->extent();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Transect(void * jarg1) {
  Transect *arg1 = (Transect *) 0 ;
  
  arg1 = (Transect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObservedPattern_vecs_set(void * jarg1, void * jarg2) {
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  std::vector< Vec2 > *arg2 = (std::vector< Vec2 > *) 0 ;
  
  arg1 = (ObservedPattern *)jarg1; 
  arg2 = (std::vector< Vec2 > *)jarg2; 
  if (arg1) (arg1)->vecs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObservedPattern_vecs_get(void * jarg1) {
  void * jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  std::vector< Vec2 > *result = 0 ;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (std::vector< Vec2 > *)& ((arg1)->vecs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObservedPattern_lengthAbove_set(void * jarg1, double jarg2) {
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  double arg2 ;
  
  arg1 = (ObservedPattern *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lengthAbove = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ObservedPattern_lengthAbove_get(void * jarg1) {
  double jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  double result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (double) ((arg1)->lengthAbove);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObservedPattern_lengthBelow_set(void * jarg1, double jarg2) {
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  double arg2 ;
  
  arg1 = (ObservedPattern *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lengthBelow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ObservedPattern_lengthBelow_get(void * jarg1) {
  double jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  double result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (double) ((arg1)->lengthBelow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObservedPattern_spacing_set(void * jarg1, double jarg2) {
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  double arg2 ;
  
  arg1 = (ObservedPattern *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->spacing = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ObservedPattern_spacing_get(void * jarg1) {
  double jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  double result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (double) ((arg1)->spacing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObservedPattern(double jarg1, double jarg2, double jarg3, void * jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  std::vector< double > arg4 ;
  std::vector< double > *argp4 ;
  ObservedPattern *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = (std::vector< double > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (ObservedPattern *)new ObservedPattern(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ObservedPattern_length(void * jarg1) {
  double jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  double result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (double)(arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObservedPattern_size(void * jarg1) {
  int jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  int result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (int)(arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObservedPattern_centerIdx(void * jarg1) {
  int jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  int result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (int)(arg1)->centerIdx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObservedPattern_vectors(void * jarg1) {
  void * jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  std::vector< double > result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (arg1)->vectors();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObservedPattern_isMissingVectors(void * jarg1) {
  unsigned int jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  bool result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (bool)(arg1)->isMissingVectors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObservedPattern_isConverging(void * jarg1) {
  unsigned int jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  bool result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (bool)(arg1)->isConverging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObservedPattern_isUnchanging(void * jarg1) {
  unsigned int jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  bool result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (bool)(arg1)->isUnchanging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObservedPattern_isSimulatableType(void * jarg1) {
  unsigned int jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  bool result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (bool)(arg1)->isSimulatableType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObservedPattern_isValid(void * jarg1) {
  unsigned int jresult ;
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  bool result;
  
  arg1 = (ObservedPattern *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObservedPattern(void * jarg1) {
  ObservedPattern *arg1 = (ObservedPattern *) 0 ;
  
  arg1 = (ObservedPattern *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_positionOffsetRange_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->positionOffsetRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_positionOffsetRange_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Utils::Range *)& ((arg1)->positionOffsetRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_lengthAboveRange_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->lengthAboveRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_lengthAboveRange_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Utils::Range *)& ((arg1)->lengthAboveRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_lengthBelowRange_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->lengthBelowRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_lengthBelowRange_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Utils::Range *)& ((arg1)->lengthBelowRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_angleOffsetRange_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->angleOffsetRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_angleOffsetRange_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Utils::Range *)& ((arg1)->angleOffsetRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_heightOffsetRange_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->heightOffsetRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_heightOffsetRange_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Utils::Range *)& ((arg1)->heightOffsetRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_widthRange_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->widthRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_widthRange_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Utils::Range *)& ((arg1)->widthRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_spacingRange_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->spacingRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_spacingRange_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Utils::Range *)& ((arg1)->spacingRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_monitor_set(void * jarg1, void * jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Monitor *arg2 = (Monitor *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (Monitor *)jarg2; 
  if (arg1) (arg1)->monitor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_monitor_get(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Monitor *result = 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (Monitor *)& ((arg1)->monitor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_matchThreshold_set(void * jarg1, double jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  double arg2 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->matchThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutoTransectFitter_matchThreshold_get(void * jarg1) {
  double jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  double result;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (double) ((arg1)->matchThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_maxIters_set(void * jarg1, int jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  int arg2 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxIters = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AutoTransectFitter_maxIters_get(void * jarg1) {
  int jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  int result;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (int) ((arg1)->maxIters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_failed_set(void * jarg1, unsigned int jarg2) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  bool arg2 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->failed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AutoTransectFitter_failed_get(void * jarg1) {
  unsigned int jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  bool result;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (bool) ((arg1)->failed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoTransectFitter(void * jarg1, void * jarg2) {
  void * jresult ;
  VecHashGrid *arg1 = 0 ;
  ConvergenceLine *arg2 = 0 ;
  AutoTransectFitter *result = 0 ;
  
  arg1 = (VecHashGrid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VecHashGrid & is null", 0);
    return 0;
  } 
  arg2 = (ConvergenceLine *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ConvergenceLine & is null", 0);
    return 0;
  } 
  result = (AutoTransectFitter *)new AutoTransectFitter(*arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AutoTransectFitter_resultsSize(void * jarg1) {
  int jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  int result;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (int)(arg1)->resultsSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_getResult(void * jarg1, int jarg2) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  int arg2 ;
  Transect result;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getResult(arg2);
  jresult = new Transect(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoTransectFitter_randomClusterSearch(void * jarg1) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  (arg1)->randomClusterSearch();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AutoTransectFitter_randomSearch(void * jarg1) {
  void * jresult ;
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  Transect result;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  result = (arg1)->randomSearch();
  jresult = new Transect(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoTransectFitter(void * jarg1) {
  AutoTransectFitter *arg1 = (AutoTransectFitter *) 0 ;
  
  arg1 = (AutoTransectFitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_VrRange_set(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->VrRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_VrRange_get(void * jarg1) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (Utils::Range *)& ((arg1)->VrRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_VtRange_set(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->VtRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_VtRange_get(void * jarg1) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (Utils::Range *)& ((arg1)->VtRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_VsRange_set(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->VsRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_VsRange_get(void * jarg1) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (Utils::Range *)& ((arg1)->VsRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_VcRange_set(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *arg2 = (Utils::Range *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (Utils::Range *)jarg2; 
  if (arg1) (arg1)->VcRange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_VcRange_get(void * jarg1) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Utils::Range *result = 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (Utils::Range *)& ((arg1)->VcRange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_monitor_set(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Monitor *arg2 = (Monitor *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (Monitor *)jarg2; 
  if (arg1) (arg1)->monitor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_monitor_get(void * jarg1) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  Monitor *result = 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (Monitor *)& ((arg1)->monitor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_matchThreshold_set(void * jarg1, double jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  double arg2 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->matchThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PatternMatcher_matchThreshold_get(void * jarg1) {
  double jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  double result;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (double) ((arg1)->matchThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_numSimulations_set(void * jarg1, int jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  int arg2 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numSimulations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PatternMatcher_numSimulations_get(void * jarg1) {
  int jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  int result;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (int) ((arg1)->numSimulations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_bestMatchScale_set(void * jarg1, double jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  double arg2 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bestMatchScale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PatternMatcher_bestMatchScale_get(void * jarg1) {
  double jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  double result;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (double) ((arg1)->bestMatchScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_minVelResults_set(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->minVelResults = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_minVelResults_get(void * jarg1) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->minVelResults);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_bestSwirlResults_set(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->bestSwirlResults = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_bestSwirlResults_get(void * jarg1) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->bestSwirlResults);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatternMatcher(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Utils::Range arg1 ;
  Utils::Range arg2 ;
  Utils::Range arg3 ;
  Utils::Range arg4 ;
  Utils::Range *argp1 ;
  Utils::Range *argp2 ;
  Utils::Range *argp3 ;
  Utils::Range *argp4 ;
  PatternMatcher *result = 0 ;
  
  argp1 = (Utils::Range *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Utils::Range", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Utils::Range *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Utils::Range", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (Utils::Range *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Utils::Range", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (Utils::Range *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Utils::Range", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (PatternMatcher *)new PatternMatcher(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PatternMatcher_bestMatchError(void * jarg1, void * jarg2) {
  double jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  SwigValueWrapper< ObservedPattern > arg2 ;
  ObservedPattern *argp2 ;
  double result;
  
  arg1 = (PatternMatcher *)jarg1; 
  argp2 = (ObservedPattern *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ObservedPattern", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->bestMatchError(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatternMatcher_bestMatch(void * jarg1, void * jarg2) {
  void * jresult ;
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  SwigValueWrapper< ObservedPattern > arg2 ;
  ObservedPattern *argp2 ;
  Pattern result;
  
  arg1 = (PatternMatcher *)jarg1; 
  argp2 = (ObservedPattern *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ObservedPattern", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->bestMatch(arg2);
  jresult = new Pattern(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatternMatcher_monteCarloMatching(void * jarg1, void * jarg2) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  SwigValueWrapper< ObservedPattern > arg2 ;
  ObservedPattern *argp2 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  argp2 = (ObservedPattern *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ObservedPattern", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->monteCarloMatching(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PatternMatcher(void * jarg1) {
  PatternMatcher *arg1 = (PatternMatcher *) 0 ;
  
  arg1 = (PatternMatcher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexFactory_bakerSterlingVortex(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  BakerSterlingVortex result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = VortexFactory::bakerSterlingVortex(arg1,arg2,arg3);
  jresult = new BakerSterlingVortex(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VortexFactory_BakerSterlingLPVortex(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  LinearPiecewiseVortex result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = VortexFactory::BakerSterlingLPVortex(arg1,arg2,arg3);
  jresult = new LinearPiecewiseVortex(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VortexFactory() {
  void * jresult ;
  VortexFactory *result = 0 ;
  
  result = (VortexFactory *)new VortexFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VortexFactory(void * jarg1) {
  VortexFactory *arg1 = (VortexFactory *) 0 ;
  
  arg1 = (VortexFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Monitor_value_set(void * jarg1, double jarg2) {
  Monitor *arg1 = (Monitor *) 0 ;
  double arg2 ;
  
  arg1 = (Monitor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Monitor_value_get(void * jarg1) {
  double jresult ;
  Monitor *arg1 = (Monitor *) 0 ;
  double result;
  
  arg1 = (Monitor *)jarg1; 
  result = (double) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Monitor_min_set(void * jarg1, double jarg2) {
  Monitor *arg1 = (Monitor *) 0 ;
  double arg2 ;
  
  arg1 = (Monitor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Monitor_min_get(void * jarg1) {
  double jresult ;
  Monitor *arg1 = (Monitor *) 0 ;
  double result;
  
  arg1 = (Monitor *)jarg1; 
  result = (double) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Monitor_max_set(void * jarg1, double jarg2) {
  Monitor *arg1 = (Monitor *) 0 ;
  double arg2 ;
  
  arg1 = (Monitor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Monitor_max_get(void * jarg1) {
  double jresult ;
  Monitor *arg1 = (Monitor *) 0 ;
  double result;
  
  arg1 = (Monitor *)jarg1; 
  result = (double) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Monitor_title_set(void * jarg1, const char * jarg2) {
  Monitor *arg1 = (Monitor *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Monitor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Monitor_title_get(void * jarg1) {
  const char * jresult ;
  Monitor *arg1 = (Monitor *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Monitor *)jarg1; 
  result = (std::string *) & ((arg1)->title);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Monitor_message_set(void * jarg1, const char * jarg2) {
  Monitor *arg1 = (Monitor *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Monitor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Monitor_message_get(void * jarg1) {
  const char * jresult ;
  Monitor *arg1 = (Monitor *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Monitor *)jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Monitor_warning_set(void * jarg1, const char * jarg2) {
  Monitor *arg1 = (Monitor *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Monitor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->warning = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Monitor_warning_get(void * jarg1) {
  const char * jresult ;
  Monitor *arg1 = (Monitor *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Monitor *)jarg1; 
  result = (std::string *) & ((arg1)->warning);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Monitor_cancelled_set(void * jarg1, unsigned int jarg2) {
  Monitor *arg1 = (Monitor *) 0 ;
  bool arg2 ;
  
  arg1 = (Monitor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cancelled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Monitor_cancelled_get(void * jarg1) {
  unsigned int jresult ;
  Monitor *arg1 = (Monitor *) 0 ;
  bool result;
  
  arg1 = (Monitor *)jarg1; 
  result = (bool) ((arg1)->cancelled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Monitor() {
  void * jresult ;
  Monitor *result = 0 ;
  
  result = (Monitor *)new Monitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Monitor(void * jarg1) {
  Monitor *arg1 = (Monitor *) 0 ;
  
  arg1 = (Monitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT VortexModel * SWIGSTDCALL CSharp_LinearPiecewiseVortex_SWIGUpcast(LinearPiecewiseVortex *jarg1) {
    return (VortexModel *)jarg1;
}

#ifdef __cplusplus
}
#endif

#endif


