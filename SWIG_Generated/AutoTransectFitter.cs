//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public partial class AutoTransectFitter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AutoTransectFitter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AutoTransectFitter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AutoTransectFitter obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AutoTransectFitter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PatternSolverPINVOKE.delete_AutoTransectFitter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Range positionOffsetRange {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_positionOffsetRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_positionOffsetRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range lengthAboveRange {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_lengthAboveRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_lengthAboveRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range lengthBelowRange {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_lengthBelowRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_lengthBelowRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range angleOffsetRange {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_angleOffsetRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_angleOffsetRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range heightOffsetRange {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_heightOffsetRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_heightOffsetRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range widthRange {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_widthRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_widthRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range spacingRange {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_spacingRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_spacingRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Monitor monitor {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_monitor_set(swigCPtr, Monitor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.AutoTransectFitter_monitor_get(swigCPtr);
      Monitor ret = (cPtr == global::System.IntPtr.Zero) ? null : new Monitor(cPtr, false);
      return ret;
    } 
  }

  public double matchThreshold {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_matchThreshold_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.AutoTransectFitter_matchThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public int maxIters {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_maxIters_set(swigCPtr, value);
    } 
    get {
      int ret = PatternSolverPINVOKE.AutoTransectFitter_maxIters_get(swigCPtr);
      return ret;
    } 
  }

  public bool failed {
    set {
      PatternSolverPINVOKE.AutoTransectFitter_failed_set(swigCPtr, value);
    } 
    get {
      bool ret = PatternSolverPINVOKE.AutoTransectFitter_failed_get(swigCPtr);
      return ret;
    } 
  }

  public AutoTransectFitter(VecHashGrid vectorHashGrid, ConvergenceLine convergenceLine) : this(PatternSolverPINVOKE.new_AutoTransectFitter(VecHashGrid.getCPtr(vectorHashGrid), ConvergenceLine.getCPtr(convergenceLine)), true) {
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
  }

  public int resultsSize() {
    int ret = PatternSolverPINVOKE.AutoTransectFitter_resultsSize(swigCPtr);
    return ret;
  }

  public Transect getResult(int index) {
    Transect ret = new Transect(PatternSolverPINVOKE.AutoTransectFitter_getResult(swigCPtr, index), true);
    return ret;
  }

  public void randomClusterSearch() {
    PatternSolverPINVOKE.AutoTransectFitter_randomClusterSearch(swigCPtr);
  }

  public Transect randomSearch() {
    Transect ret = new Transect(PatternSolverPINVOKE.AutoTransectFitter_randomSearch(swigCPtr), true);
    return ret;
  }

}
