//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public partial class Transect : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Transect(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Transect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Transect obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Transect() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PatternSolverPINVOKE.delete_Transect(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public double x {
    set {
      PatternSolverPINVOKE.Transect_x_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_x_get(swigCPtr);
      return ret;
    } 
  }

  public double y {
    set {
      PatternSolverPINVOKE.Transect_y_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_y_get(swigCPtr);
      return ret;
    } 
  }

  public double theta {
    set {
      PatternSolverPINVOKE.Transect_theta_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_theta_get(swigCPtr);
      return ret;
    } 
  }

  public double lengthAbove {
    set {
      PatternSolverPINVOKE.Transect_lengthAbove_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_lengthAbove_get(swigCPtr);
      return ret;
    } 
  }

  public double lengthBelow {
    set {
      PatternSolverPINVOKE.Transect_lengthBelow_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_lengthBelow_get(swigCPtr);
      return ret;
    } 
  }

  public double width {
    set {
      PatternSolverPINVOKE.Transect_width_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_width_get(swigCPtr);
      return ret;
    } 
  }

  public double positionOffset {
    set {
      PatternSolverPINVOKE.Transect_positionOffset_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_positionOffset_get(swigCPtr);
      return ret;
    } 
  }

  public double heightOffset {
    set {
      PatternSolverPINVOKE.Transect_heightOffset_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_heightOffset_get(swigCPtr);
      return ret;
    } 
  }

  public double angleOffset {
    set {
      PatternSolverPINVOKE.Transect_angleOffset_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_angleOffset_get(swigCPtr);
      return ret;
    } 
  }

  public double spacing {
    set {
      PatternSolverPINVOKE.Transect_spacing_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Transect_spacing_get(swigCPtr);
      return ret;
    } 
  }

  public string name {
    set {
      PatternSolverPINVOKE.Transect_name_set(swigCPtr, value);
      if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = PatternSolverPINVOKE.Transect_name_get(swigCPtr);
      if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Transect(double x, double y, double lengthAbove, double lengthBelow, double width) : this(PatternSolverPINVOKE.new_Transect__SWIG_0(x, y, lengthAbove, lengthBelow, width), true) {
  }

  public Transect(string name) : this(PatternSolverPINVOKE.new_Transect__SWIG_1(name), true) {
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
  }

  public Transect() : this(PatternSolverPINVOKE.new_Transect__SWIG_2(), true) {
  }

  public void setPerpendicularAngle(double a) {
    PatternSolverPINVOKE.Transect_setPerpendicularAngle(swigCPtr, a);
  }

  public SWIGTYPE_p_std__arrayT_double_2_t center() {
    SWIGTYPE_p_std__arrayT_double_2_t ret = new SWIGTYPE_p_std__arrayT_double_2_t(PatternSolverPINVOKE.Transect_center(swigCPtr), true);
    return ret;
  }

  public Rect normRect() {
    Rect ret = new Rect(PatternSolverPINVOKE.Transect_normRect(swigCPtr), true);
    return ret;
  }

  public DoubleVector extent() {
    DoubleVector ret = new DoubleVector(PatternSolverPINVOKE.Transect_extent(swigCPtr), true);
    return ret;
  }

}
