//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PatternSolver {
  public unsafe static SWIGTYPE_p_std__spanT_double_t createSpan(SWIGTYPE_p_double spanArray, int size) {
    SWIGTYPE_p_std__spanT_double_t ret = new SWIGTYPE_p_std__spanT_double_t(PatternSolverPINVOKE.createSpan(SWIGTYPE_p_double.getCPtr(spanArray), size), true);
    return ret;
  }

  public static int getSpanSize(SWIGTYPE_p_std__spanT_double_t span) {
    int ret = PatternSolverPINVOKE.getSpanSize(SWIGTYPE_p_std__spanT_double_t.getCPtr(span));
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getSpanPtr(SWIGTYPE_p_std__spanT_double_t span) {
    global::System.IntPtr cPtr = PatternSolverPINVOKE.getSpanPtr(SWIGTYPE_p_std__spanT_double_t.getCPtr(span));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void freeSpan(SWIGTYPE_p_std__spanT_double_t span) {
    PatternSolverPINVOKE.freeSpan(SWIGTYPE_p_std__spanT_double_t.getCPtr(span));
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe static DoubleVector createVector(double[] sourceArray, int size) {
    fixed ( double* swig_ptrTo_sourceArray = sourceArray ) {
    {
      DoubleVector ret = new DoubleVector(PatternSolverPINVOKE.createVector((global::System.IntPtr)swig_ptrTo_sourceArray, size), true);
      return ret;
    }
    }
  }

  public static SWIGTYPE_p_double getVector(DoubleVector sourceVector) {
    global::System.IntPtr cPtr = PatternSolverPINVOKE.getVector(DoubleVector.getCPtr(sourceVector));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void writeBinaryFile(DoubleVector data, string filename) {
    PatternSolverPINVOKE.writeBinaryFile(DoubleVector.getCPtr(data), filename);
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
  }

  public static DoubleVector readBinaryFile(string filename) {
    DoubleVector ret = new DoubleVector(PatternSolverPINVOKE.readBinaryFile(filename), true);
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int gridSize {
    get {
      int ret = PatternSolverPINVOKE.gridSize_get();
      return ret;
    } 
  }

  public static double PI {
    get {
      double ret = PatternSolverPINVOKE.PI_get();
      return ret;
    } 
  }

}
