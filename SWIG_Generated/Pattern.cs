//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public partial class Pattern : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Pattern(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Pattern obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Pattern obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Pattern() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PatternSolverPINVOKE.delete_Pattern(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DoubleVector vecs {
    set {
      PatternSolverPINVOKE.Pattern_vecs_set(swigCPtr, DoubleVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.Pattern_vecs_get(swigCPtr);
      DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
      return ret;
    } 
  }

  public double dx {
    set {
      PatternSolverPINVOKE.Pattern_dx_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Pattern_dx_get(swigCPtr);
      return ret;
    } 
  }

  public double lower {
    set {
      PatternSolverPINVOKE.Pattern_lower_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Pattern_lower_get(swigCPtr);
      return ret;
    } 
  }

  public double upper {
    set {
      PatternSolverPINVOKE.Pattern_upper_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Pattern_upper_get(swigCPtr);
      return ret;
    } 
  }

  public double Xc {
    set {
      PatternSolverPINVOKE.Pattern_Xc_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.Pattern_Xc_get(swigCPtr);
      return ret;
    } 
  }

  public Pattern() : this(PatternSolverPINVOKE.new_Pattern__SWIG_0(), true) {
  }

  public Pattern(double dx_, double lower_, double upper_, double Xc_) : this(PatternSolverPINVOKE.new_Pattern__SWIG_1(dx_, lower_, upper_, Xc_), true) {
  }

  public void reserve(uint n) {
    PatternSolverPINVOKE.Pattern_reserve(swigCPtr, n);
  }

  public void insert(SWIGTYPE_p_std__arrayT_double_4_t p) {
    PatternSolverPINVOKE.Pattern_insert(swigCPtr, SWIGTYPE_p_std__arrayT_double_4_t.getCPtr(p));
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
  }

}
