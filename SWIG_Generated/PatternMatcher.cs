//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public partial class PatternMatcher : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PatternMatcher(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PatternMatcher obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PatternMatcher obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PatternMatcher() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PatternSolverPINVOKE.delete_PatternMatcher(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Range VrRange {
    set {
      PatternSolverPINVOKE.PatternMatcher_VrRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.PatternMatcher_VrRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range VtRange {
    set {
      PatternSolverPINVOKE.PatternMatcher_VtRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.PatternMatcher_VtRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range VsRange {
    set {
      PatternSolverPINVOKE.PatternMatcher_VsRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.PatternMatcher_VsRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Range VcRange {
    set {
      PatternSolverPINVOKE.PatternMatcher_VcRange_set(swigCPtr, Range.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.PatternMatcher_VcRange_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      return ret;
    } 
  }

  public Monitor monitor {
    set {
      PatternSolverPINVOKE.PatternMatcher_monitor_set(swigCPtr, Monitor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.PatternMatcher_monitor_get(swigCPtr);
      Monitor ret = (cPtr == global::System.IntPtr.Zero) ? null : new Monitor(cPtr, false);
      return ret;
    } 
  }

  public double matchThreshold {
    set {
      PatternSolverPINVOKE.PatternMatcher_matchThreshold_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.PatternMatcher_matchThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public int numSimulations {
    set {
      PatternSolverPINVOKE.PatternMatcher_numSimulations_set(swigCPtr, value);
    } 
    get {
      int ret = PatternSolverPINVOKE.PatternMatcher_numSimulations_get(swigCPtr);
      return ret;
    } 
  }

  public double bestMatchScale {
    set {
      PatternSolverPINVOKE.PatternMatcher_bestMatchScale_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.PatternMatcher_bestMatchScale_get(swigCPtr);
      return ret;
    } 
  }

  public DoubleVector minVelResults {
    set {
      PatternSolverPINVOKE.PatternMatcher_minVelResults_set(swigCPtr, DoubleVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.PatternMatcher_minVelResults_get(swigCPtr);
      DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
      return ret;
    } 
  }

  public DoubleVector bestSwirlResults {
    set {
      PatternSolverPINVOKE.PatternMatcher_bestSwirlResults_set(swigCPtr, DoubleVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PatternSolverPINVOKE.PatternMatcher_bestSwirlResults_get(swigCPtr);
      DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
      return ret;
    } 
  }

  public PatternMatcher(Range VrRange, Range VtRange, Range VsRange, Range VcRange) : this(PatternSolverPINVOKE.new_PatternMatcher(Range.getCPtr(VrRange), Range.getCPtr(VtRange), Range.getCPtr(VsRange), Range.getCPtr(VcRange)), true) {
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
  }

  public double bestMatchError(ObservedPattern obsPattern) {
    double ret = PatternSolverPINVOKE.PatternMatcher_bestMatchError(swigCPtr, ObservedPattern.getCPtr(obsPattern));
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pattern bestMatch(ObservedPattern obsPattern) {
    Pattern ret = new Pattern(PatternSolverPINVOKE.PatternMatcher_bestMatch(swigCPtr, ObservedPattern.getCPtr(obsPattern)), true);
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void monteCarloMatching(ObservedPattern obsPattern) {
    PatternSolverPINVOKE.PatternMatcher_monteCarloMatching(swigCPtr, ObservedPattern.getCPtr(obsPattern));
    if (PatternSolverPINVOKE.SWIGPendingException.Pending) throw PatternSolverPINVOKE.SWIGPendingException.Retrieve();
  }

}
