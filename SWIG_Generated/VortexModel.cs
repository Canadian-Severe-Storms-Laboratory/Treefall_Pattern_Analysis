//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public partial class VortexModel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VortexModel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VortexModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(VortexModel obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~VortexModel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PatternSolverPINVOKE.delete_VortexModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public double Vr {
    set {
      PatternSolverPINVOKE.VortexModel_Vr_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.VortexModel_Vr_get(swigCPtr);
      return ret;
    } 
  }

  public double Vt {
    set {
      PatternSolverPINVOKE.VortexModel_Vt_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.VortexModel_Vt_get(swigCPtr);
      return ret;
    } 
  }

  public double Vs {
    set {
      PatternSolverPINVOKE.VortexModel_Vs_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.VortexModel_Vs_get(swigCPtr);
      return ret;
    } 
  }

  public double lower {
    set {
      PatternSolverPINVOKE.VortexModel_lower_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.VortexModel_lower_get(swigCPtr);
      return ret;
    } 
  }

  public double upper {
    set {
      PatternSolverPINVOKE.VortexModel_upper_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.VortexModel_upper_get(swigCPtr);
      return ret;
    } 
  }

  public double Xc {
    set {
      PatternSolverPINVOKE.VortexModel_Xc_set(swigCPtr, value);
    } 
    get {
      double ret = PatternSolverPINVOKE.VortexModel_Xc_get(swigCPtr);
      return ret;
    } 
  }

  public virtual SWIGTYPE_p_Vec2 vecAt(double x, double y) {
    SWIGTYPE_p_Vec2 ret = new SWIGTYPE_p_Vec2(PatternSolverPINVOKE.VortexModel_vecAt(swigCPtr, x, y), true);
    return ret;
  }

  public virtual double patternLocation(double x) {
    double ret = PatternSolverPINVOKE.VortexModel_patternLocation(swigCPtr, x);
    return ret;
  }

  public virtual bool patternLocationExists(double x) {
    bool ret = PatternSolverPINVOKE.VortexModel_patternLocationExists(swigCPtr, x);
    return ret;
  }

  public void solveAxesOfInterest() {
    PatternSolverPINVOKE.VortexModel_solveAxesOfInterest(swigCPtr);
  }

  public double length() {
    double ret = PatternSolverPINVOKE.VortexModel_length(swigCPtr);
    return ret;
  }

  public double lengthAbove() {
    double ret = PatternSolverPINVOKE.VortexModel_lengthAbove(swigCPtr);
    return ret;
  }

  public double lengthBelow() {
    double ret = PatternSolverPINVOKE.VortexModel_lengthBelow(swigCPtr);
    return ret;
  }

  public double vmax() {
    double ret = PatternSolverPINVOKE.VortexModel_vmax(swigCPtr);
    return ret;
  }

  public bool hasPattern() {
    bool ret = PatternSolverPINVOKE.VortexModel_hasPattern(swigCPtr);
    return ret;
  }

  public bool isOuterType() {
    bool ret = PatternSolverPINVOKE.VortexModel_isOuterType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Vec2 unitVecAt(double x, double y) {
    SWIGTYPE_p_Vec2 ret = new SWIGTYPE_p_Vec2(PatternSolverPINVOKE.VortexModel_unitVecAt(swigCPtr, x, y), true);
    return ret;
  }

  public SWIGTYPE_p_Vec2 patternVec(double x) {
    SWIGTYPE_p_Vec2 ret = new SWIGTYPE_p_Vec2(PatternSolverPINVOKE.VortexModel_patternVec(swigCPtr, x), true);
    return ret;
  }

  public double magAt(double x, double y) {
    double ret = PatternSolverPINVOKE.VortexModel_magAt(swigCPtr, x, y);
    return ret;
  }

  public double swirlRatio() {
    double ret = PatternSolverPINVOKE.VortexModel_swirlRatio(swigCPtr);
    return ret;
  }

  public DoubleVector field(double minX, double maxX, double minY, double maxY, int N) {
    DoubleVector ret = new DoubleVector(PatternSolverPINVOKE.VortexModel_field__SWIG_0(swigCPtr, minX, maxX, minY, maxY, N), true);
    return ret;
  }

  public DoubleVector field(double minX, double maxX, double minY, double maxY, double dx) {
    DoubleVector ret = new DoubleVector(PatternSolverPINVOKE.VortexModel_field__SWIG_1(swigCPtr, minX, maxX, minY, maxY, dx), true);
    return ret;
  }

  public Curve patternCurve(int numPoints) {
    Curve ret = new Curve(PatternSolverPINVOKE.VortexModel_patternCurve(swigCPtr, numPoints), true);
    return ret;
  }

  public Pattern pattern(double dx) {
    Pattern ret = new Pattern(PatternSolverPINVOKE.VortexModel_pattern__SWIG_0(swigCPtr, dx), true);
    return ret;
  }

  public Pattern pattern(int numVecs) {
    Pattern ret = new Pattern(PatternSolverPINVOKE.VortexModel_pattern__SWIG_1(swigCPtr, numVecs), true);
    return ret;
  }

}
